@startuml

class Game{
    -listOfPlayers: List<Player>
    ' the goal will be printed to 
    ' the user when the game begins.
    -goal: String 
    -deck: Deck
    -board: Board
}
Game --> Player
Game --> Deck
Game --> Board

class Board{
    -setOfPiles: List<Piles>
    +printBoard(): String/Void
    +printPossibleMoves(): String/Void
}
Board --> Pile
Board --> Play

class Play{
    -currentPlayer: Player
    -listOfAllPiles: List<Pile>
    +getAllPossibleMoves(): List<String>
    +playMove(index: int): void
}

class Deck{
    -listOfCards: List<Card>
    +distributeCardsToPlayers(howManyEach: int, players:List<Player> ): void
    +distributeCardsToPiles(howMany: List<int> ): List<Pile>
}
Deck --> Pile
Deck --> Player

class Pile{
    -cards: List<Card>
    -ruleBook: RuleBook
    ' pushes a card onto the stack
    +receiveCard(card: Card): void
    +printTop(): String/void
    +printContents(): String/void
}
Pile --> Card
Pile --> RuleBook

class RuleBook{
    +getAllPossibleMoves(currentPile: Pile, listOfOtherPiles: List<Pile>): List<Strings>
}

class Hand extends Pile{
    owner: Player
    
}

class Card {
    -rank: String
    -suit: String
    -visible: boolean
    -isRed: boolean
}

class Player{
    -hand: Hand
    +receiveCard(card: Card): void
}
Player --> Hand

@enduml